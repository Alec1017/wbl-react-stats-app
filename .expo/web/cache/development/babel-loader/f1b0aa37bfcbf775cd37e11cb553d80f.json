{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/alecdifederico/code/wbl-react-stats-app/pages/Analytics.js\";\nimport React, { useState, useEffect } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { heightPercentageToDP as hp, widthPercentageToDP as wp } from 'react-native-responsive-screen';\nimport { ActivityIndicator } from 'react-native-paper';\nimport Header from \"../components/Header\";\nimport AnalyticsChart from \"../components/AnalyticsChart\";\nexport default function Analytics(props) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      battingAverages = _useState2[0],\n      setBattingAverages = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      ERAs = _useState4[0],\n      setERAs = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      currentBattingAverage = _useState6[0],\n      setCurrentBattingAverage = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      currentERA = _useState8[0],\n      setCurrentERA = _useState8[1];\n\n  var _useState9 = useState(0),\n      _useState10 = _slicedToArray(_useState9, 2),\n      leagueBattingAverage = _useState10[0],\n      setLeagueBattingAverage = _useState10[1];\n\n  var _useState11 = useState(0),\n      _useState12 = _slicedToArray(_useState11, 2),\n      leagueERA = _useState12[0],\n      setLeagueERA = _useState12[1];\n\n  var _useState13 = useState(5),\n      _useState14 = _slicedToArray(_useState13, 2),\n      gamesThreshold = _useState14[0],\n      setGamesThreshold = _useState14[1];\n\n  var _useState15 = useState(true),\n      _useState16 = _slicedToArray(_useState15, 2),\n      isLoading = _useState16[0],\n      setIsLoading = _useState16[1];\n\n  useEffect(function () {\n    buildAnalytics();\n  }, []);\n\n  function buildAnalytics() {\n    var cumulation, cumulationERA, total, _iterator, _isArray, _i, _ref, _game, _hits, _atBats, _earnedRuns, _inningsPitched;\n\n    return _regeneratorRuntime.async(function buildAnalytics$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            cumulation = [];\n            cumulationERA = [];\n            total = {\n              hits: 0,\n              leagueHits: 0,\n              atBats: 0,\n              leagueAtBats: 0,\n              earnedRuns: 0,\n              leagueEarnedRuns: 0,\n              inningsPitched: 0,\n              leagueInningsPitched: 0\n            };\n            _iterator = props.route.params.games, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === \"function\" ? typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\" : \"@@iterator\"]();\n\n          case 4:\n            if (!_isArray) {\n              _context.next = 10;\n              break;\n            }\n\n            if (!(_i >= _iterator.length)) {\n              _context.next = 7;\n              break;\n            }\n\n            return _context.abrupt(\"break\", 26);\n\n          case 7:\n            _ref = _iterator[_i++];\n            _context.next = 14;\n            break;\n\n          case 10:\n            _i = _iterator.next();\n\n            if (!_i.done) {\n              _context.next = 13;\n              break;\n            }\n\n            return _context.abrupt(\"break\", 26);\n\n          case 13:\n            _ref = _i.value;\n\n          case 14:\n            _game = _ref;\n            _hits = _game.singles + _game.doubles + _game.triples + _game.homeRuns;\n            _atBats = _hits + _game.outs + _game.strikeouts;\n            _earnedRuns = _game.earnedRuns;\n            _inningsPitched = _game.inningsPitched;\n\n            if (_game.uid == props.route.params.userData.uid) {\n              total.hits += _hits;\n              total.atBats += _atBats;\n              total.earnedRuns += _earnedRuns;\n              total.inningsPitched += _inningsPitched;\n\n              if (_atBats > 0) {\n                cumulation.push(total.hits / total.atBats);\n              }\n\n              if (_inningsPitched > 0) {\n                cumulationERA.push(total.earnedRuns * 3 / total.inningsPitched);\n              }\n            }\n\n            total.leagueHits += _hits;\n            total.leagueAtBats += _atBats;\n            total.leagueEarnedRuns += _earnedRuns;\n            total.leagueInningsPitched += _inningsPitched;\n\n          case 24:\n            _context.next = 4;\n            break;\n\n          case 26:\n            if (total.leagueAtBats > 0) {\n              setLeagueBattingAverage(total.leagueHits / total.leagueAtBats);\n            }\n\n            if (total.leagueInningsPitched > 0) {\n              setLeagueERA(total.leagueEarnedRuns * 3 / total.leagueInningsPitched);\n            }\n\n            setBattingAverages(cumulation);\n            setERAs(cumulationERA);\n            setCurrentBattingAverage(Number(cumulation[cumulation.length - 1]).toFixed(3));\n            setCurrentERA(Number(cumulationERA[cumulationERA.length - 1]).toFixed(2));\n            setIsLoading(false);\n\n          case 33:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  }\n\n  function calcStatMax(addition, leagueValue, highestUserValue) {\n    return Math.round(Math.max(leagueValue, highestUserValue) + addition);\n  }\n\n  function renderContent() {\n    if (!isLoading) {\n      if (battingAverages.length >= gamesThreshold && currentBattingAverage !== '') {\n        return React.createElement(View, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          }\n        }, React.createElement(View, {\n          style: {\n            marginTop: 30\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          }\n        }, React.createElement(Text, {\n          style: {\n            fontSize: 20,\n            fontWeight: 'bold'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          }\n        }, \"Batting AVG: \", currentBattingAverage), React.createElement(AnalyticsChart, {\n          averages: battingAverages,\n          leagueAverage: leagueBattingAverage,\n          gameFrequency: 5,\n          setMax: 1,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          }\n        })), React.createElement(View, {\n          style: {\n            marginTop: 30\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          }\n        }, React.createElement(Text, {\n          style: {\n            fontSize: 20,\n            fontWeight: 'bold'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          }\n        }, \"ERA: \", currentERA), React.createElement(AnalyticsChart, {\n          averages: ERAs,\n          leagueAverage: leagueERA,\n          gameFrequency: 5,\n          setMax: calcStatMax(2, leagueERA, Math.max.apply(Math, _toConsumableArray(ERAs))),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          }\n        })));\n      } else {\n        return React.createElement(View, {\n          style: {\n            height: hp('80%'),\n            paddingTop: wp('18%')\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106\n          }\n        }, React.createElement(Image, {\n          style: {\n            marginTop: 30,\n            height: hp('30%'),\n            width: wp('80%')\n          },\n          resizeMode: \"contain\",\n          source: require(\"../assets/chart.png\"),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107\n          }\n        }), React.createElement(View, {\n          style: {\n            width: wp('80%')\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          }\n        }, React.createElement(Text, {\n          style: {\n            fontSize: 20,\n            fontWeight: 'bold',\n            textAlign: 'center'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117\n          }\n        }, \"Play at least \", gamesThreshold, \" games to see analytics\")));\n      }\n    } else {\n      return React.createElement(View, {\n        style: {\n          height: hp('80%')\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        }\n      }, React.createElement(ActivityIndicator, {\n        style: {\n          marginTop: hp('20%')\n        },\n        animating: true,\n        size: \"large\",\n        color: \"#007bff\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        }\n      }));\n    }\n  }\n\n  return React.createElement(Header, {\n    title: \"Analytics\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    }\n  }, renderContent());\n}","map":{"version":3,"sources":["/Users/alecdifederico/code/wbl-react-stats-app/pages/Analytics.js"],"names":["React","useState","useEffect","heightPercentageToDP","hp","widthPercentageToDP","wp","ActivityIndicator","Header","AnalyticsChart","Analytics","props","battingAverages","setBattingAverages","ERAs","setERAs","currentBattingAverage","setCurrentBattingAverage","currentERA","setCurrentERA","leagueBattingAverage","setLeagueBattingAverage","leagueERA","setLeagueERA","gamesThreshold","setGamesThreshold","isLoading","setIsLoading","buildAnalytics","cumulation","cumulationERA","total","hits","leagueHits","atBats","leagueAtBats","earnedRuns","leagueEarnedRuns","inningsPitched","leagueInningsPitched","route","params","games","game","singles","doubles","triples","homeRuns","outs","strikeouts","uid","userData","push","Number","length","toFixed","calcStatMax","addition","leagueValue","highestUserValue","Math","round","max","renderContent","marginTop","fontSize","fontWeight","height","paddingTop","width","require","textAlign"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Text, View, Image } from 'react-native';\nimport { heightPercentageToDP as hp, widthPercentageToDP as wp } from 'react-native-responsive-screen';\nimport { ActivityIndicator } from 'react-native-paper';\n\nimport Header from '../components/Header';\nimport AnalyticsChart from '../components/AnalyticsChart';\n\n\nexport default function Analytics(props) {\n  const [battingAverages, setBattingAverages] = useState([]);\n  const [ERAs, setERAs] = useState([]);\n\n  const [currentBattingAverage, setCurrentBattingAverage] = useState('');\n  const [currentERA, setCurrentERA] = useState('');\n\n  const [leagueBattingAverage, setLeagueBattingAverage] = useState(0);\n  const [leagueERA, setLeagueERA] = useState(0);\n\n  const [gamesThreshold, setGamesThreshold] = useState(5);\n  const [isLoading, setIsLoading] = useState(true);\n\n\n  useEffect(() => {\n    buildAnalytics();\n  }, []);\n\n  async function buildAnalytics() {\n    let cumulation = [];\n    let cumulationERA = [];\n    let total = {\n      hits: 0,\n      leagueHits: 0,\n      atBats: 0,\n      leagueAtBats: 0,\n      earnedRuns: 0,\n      leagueEarnedRuns: 0,\n      inningsPitched: 0,\n      leagueInningsPitched: 0\n    };\n\n    for (const game of props.route.params.games) {\n      const hits = game.singles + game.doubles + game.triples + game.homeRuns;\n      const atBats = hits + game.outs + game.strikeouts;\n      const earnedRuns = game.earnedRuns;\n      const inningsPitched = game.inningsPitched;\n\n      if (game.uid == props.route.params.userData.uid) {\n        total.hits += hits;\n        total.atBats += atBats;\n        total.earnedRuns += earnedRuns;\n        total.inningsPitched += inningsPitched;\n\n        if (atBats > 0) {\n          cumulation.push(total.hits / total.atBats);\n        }\n\n        if (inningsPitched > 0) {\n          cumulationERA.push((total.earnedRuns * 3) / total.inningsPitched);\n        }\n      }\n\n      total.leagueHits += hits;\n      total.leagueAtBats += atBats;\n      total.leagueEarnedRuns += earnedRuns;\n      total.leagueInningsPitched += inningsPitched;\n    }\n\n    if (total.leagueAtBats > 0) {\n      setLeagueBattingAverage(total.leagueHits / total.leagueAtBats);\n    }\n\n    if (total.leagueInningsPitched > 0) {\n      setLeagueERA((total.leagueEarnedRuns * 3) / total.leagueInningsPitched);\n    }\n\n    setBattingAverages(cumulation);\n    setERAs(cumulationERA);\n    setCurrentBattingAverage(Number(cumulation[cumulation.length - 1]).toFixed(3));\n    setCurrentERA(Number(cumulationERA[cumulationERA.length - 1]).toFixed(2));\n    setIsLoading(false);\n  }\n\n  function calcStatMax(addition, leagueValue, highestUserValue) {\n    return Math.round(Math.max(leagueValue, highestUserValue) + addition);\n  }\n\n  function renderContent() {\n    if(!isLoading) {\n      if (battingAverages.length >= gamesThreshold && currentBattingAverage !== '') {\n        return (\n          <View>\n            <View style={{marginTop: 30}}>\n              <Text style={{fontSize: 20, fontWeight: 'bold' }}>Batting AVG: {currentBattingAverage}</Text>\n              <AnalyticsChart averages={battingAverages} leagueAverage={leagueBattingAverage} gameFrequency={5} setMax={1} />\n            </View>\n  \n            <View style={{marginTop: 30}}>\n              <Text style={{fontSize: 20, fontWeight: 'bold' }}>ERA: {currentERA}</Text>\n              <AnalyticsChart averages={ERAs} leagueAverage={leagueERA} gameFrequency={5} setMax={calcStatMax(2, leagueERA, Math.max(...ERAs))} />\n            </View>\n          </View>\n        );\n      } else {\n        return (\n          <View style={{height: hp('80%'), paddingTop: wp('18%')}}>\n            <Image\n              style={{\n                marginTop: 30,\n                height: hp('30%'),\n                width: wp('80%')\n              }}\n              resizeMode=\"contain\"\n              source={require('../assets/chart.png')}\n            />\n            <View style={{width: wp('80%')}}>\n              <Text style={{ fontSize: 20, fontWeight: 'bold', textAlign: 'center'}}>Play at least {gamesThreshold} games to see analytics</Text>\n            </View>\n          </View>\n        );\n      }\n    } else {\n      return (\n          <View style={{height: hp('80%')}}>\n            <ActivityIndicator style={{marginTop: hp('20%')}} animating={true} size=\"large\" color=\"#007bff\" />\n          </View>\n      );\n    }\n  }\n\n  return (\n    <Header title=\"Analytics\"> \n      {renderContent()}\n    </Header>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}